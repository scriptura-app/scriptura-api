package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"errors"
	gql "scriptura/scriptura-api/graphql/.generated"
	"scriptura/scriptura-api/models"
	"scriptura/scriptura-api/repository"
)

// Bible is the resolver for the bible field.
func (r *queryResolver) Bible(ctx context.Context, input gql.BibleInput) ([]*models.Verse, error) {
	// Bible is the resolver for the bible field.

	i := repository.BibleTextInput{
		Version:    *input.Version,
		Book:       *input.Book,
		Chapter:    *input.Chapter,
		StartVerse: *input.StartVerse,
		EndVerse:   *input.EndVerse,
		Cursor:     *input.Cursor,
		Offset:     *input.Offset,
		Limit:      *input.Limit,
	}

	if i.Book == "" && i.Cursor != 0 {
		i.Book = "1"
	}

	if i.Book != "" && i.Chapter == 0 && i.StartVerse != 0 {
		i.Chapter = 1
	}

	if i.Cursor != 0 && i.Offset != 0 {
		return []*models.Verse{}, errors.New("can't use offset and cursor at same time")
	}

	verses, _, err := r.AppRepository.Bible.GetBibleText(i)
	var versesPtrs []*models.Verse

	for i := range verses {
		versesPtrs = append(versesPtrs, &verses[i])
	}
	return versesPtrs, err
}
